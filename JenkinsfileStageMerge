#!groovy

// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'
STABLE_LABEL = "stable"

// git commit default
env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

imageList = ["jenkins-fedoraci-slave", "fedoraci-runner"]
imageOperations = []

def libraries = ['contra-lib'              : ['master', 'https://github.com/openshift/contra-lib']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])
}

// Check out PR's version of library
library identifier: "upstream-fedora-pipeline@${env.ghprbActualCommit}",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/${env.ghprbGhRepository}",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])


properties([
  buildDiscarder(logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20')),
  [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/upstream-fedora-pipeline/'],
  [$class: 'org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty', triggers:[
    [
      $class: 'org.jenkinsci.plugins.ghprb.GhprbTrigger',
      orgslist: 'CentOS-PaaS-SIG',
      cron: 'H/5 * * * *',
      triggerPhrase: '.*\\[merge\\].*',
      onlyTriggerPhrase: true,
      useGitHubHooks: true,
      permitAll: true,
      autoCloseFailedPullRequests: false,
      displayBuildErrorsOnDownstreamBuilds: true,
      extensions: [
        [
          $class: 'org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus',
          commitStatusContext: 'Merge PR',
          showMatrixStatus: false,
          triggeredStatus: 'Starting job...',
          startedStatus: 'merging...',
        ]
      ]
    ]
  ]]
])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'merge-trigger-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Detect Images to Promote") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(openshiftProject) {
                            imageList.each {
                                String tagList = sh(
                                        script: "oc get is -n ${openshiftProject} -o=jsonpath=\'{.items[?(@.metadata.name==\"${it}\")].status.tags[*].tag}\'",
                                        returnStdout: true
                                ).trim()
                                def prTag = tagList.tokenize(' ').find { it == "PR-" + env.ghprbPullId }
                                if (prTag != null) {
                                    echo "Found PR tag: " + prTag + " for image ${it}"
                                    imageOperations.add(it)
                                } else {
                                    echo "No tag found for image ${it}!"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Merge PR and Rebuild Images") {
            steps {
                // lock to make sure only one is allowed at anytime
                lock('merge-lock') {
                    script {
                        // need this for ghprb plugin since it is really
                        // a post build step and it assumes the build is complete.
                        currentBuild.result = 'SUCCESS'
                    }

                    step([$class: 'GhprbPullRequestMerge', allowMergeWithoutTriggerPhrase: false, deleteOnMerge: false, disallowOwnCode: false, failOnNonMerge: false, mergeComment: ' ', onlyAdminsMerge: false])

                    script {
                        openshift.withCluster() {
                            openshift.withProject(openshiftProject) {
                                imageOperations.each {
                                    buildOpenShiftImage(openshiftProject: openshiftProject,
                                                        buildConfig: it,
                                                        tag: "stable",
                                                        pullId: env.ghprbPullId)
                                }
                            }
                        }
                        packagepipelineUtils.sendPRCommentforTags(imageOperations)
                    }
                }
            }
        }
    }
}

