#!groovy


timestamps {
    def libraries = ['upstream-fedora-pipeline': ['master', 'https://github.com/CentOS-PaaS-SIG/upstream-fedora-pipeline.git'],
                     'contra-lib'              : ['master', 'https://github.com/openshift/contra-lib.git']]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])

    }

    properties(
            [
                    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '500', daysToKeepStr: '', numToKeepStr: '500')),
                    parameters(
                            [
                                    string(description: 'fedora-fedmsg', defaultValue: '{}', name: 'CI_MESSAGE')
                            ]
                    ),
                    pipelineTriggers(
                            [[$class: 'CIBuildTrigger',
                              noSquash: true,
                              providerData: [
                                  $class: 'FedMsgSubscriberProviderData',
                                  name: 'fedora-fedmsg',
                                  overrides: [
                                      topic: 'org.fedoraproject.prod.buildsys.build.state.change'
                                  ],
                                  checks: [
                                      [field: 'new', expectedValue: '1|CLOSED'],
                                      [field: 'owner', expectedValue: '^(?!koschei&!mbs\\/mbs\\.fedoraproject\\.org).*']
                                  ]
                              ]
                            ]]
                    )
            ]
    )

    def TRIGGER_RETRY_COUNT = 3
    def stepName = null

    node('master') {

        // pull in ciMetrics from ci-pipeline
        // ciMetrics.prefix = packagepipelineUtils.influxDBPrefix()
        // packagepipelineUtils.cimetrics = ciMetrics
        // def jobMeasurement = packagepipelineUtils.timedMeasurement()

        packagepipelineUtils.ciPipeline {
            try {
                stepName = 'upstream-fedora-pipeline-build-trigger'
                stage(stepName) {

                    packagepipelineUtils.handlePipelineStep(stepName: stepName, debug: true) {

                        print "CI_MESSAGE"
                        print CI_MESSAGE
                        parsedMsg = kojiMessage(message: env.CI_MESSAGE, ignoreErrors: true)
                        packagepipelineUtils.setScratchVars(parsedMsg)
                        packagepipelineUtils.setDefaultEnvVars()
                        targetBranch = false
                        if (env.fed_request_1) {
                            branches = packagepipelineUtils.setBuildBranch(env.request_1)
                            env.branch = branches[0]
                            env.fed_branch = branches[1]
                            targetBranch = packagepipelineUtils.checkBranch(env.fed_branch)
                            def tagMatcher = env.fed_request_1 =~ /f([0-9]+)-candidate/
                            if (!tagMatcher && env.fed_request_1 != 'rawhide') {
                                print("Don't trigger test for build with Build Target tag: ${env.fed_request_1}")
                                targetBranch = false
                            }
                        }

                        if (parsedMsg['owner'] == "mbs/mbs.fedoraproject.org" || parsedMsg['owner'] == "koschei") {
                            print("Not triggering for modules or koschei builds")
                            targetBranch = false
                        }

                        // If the PR pipeline submit the build, let's just set targetBranch to false so we don't run
                        if (parsedMsg['owner'] == "bpeck/jenkins-continuous-infra.apps.ci.centos.org") {
                            print("This build is for a scratch build from the PR pipeline. Not triggering.")
                            targetBranch = false
                        }

                        if (targetBranch) {
                            env.fed_repo = packagepipelineUtils.repoFromRequest(env.request_0)
                            env.fed_namespace = 'rpms' // used in setMessageFields
                            testsExist = packagepipelineUtils.checkTests(env.fed_repo, env.fed_branch, 'classic')
                            // Ensure message is from primary koji instance
                            primaryKoji = parsedMsg['instance'] == "primary"
                            currentBuild.displayName = "BUILD#: ${env.BUILD_NUMBER} - Branch: ${env.fed_branch} - Package: ${env.fed_repo}"
                        } else {
                            currentBuild.displayName = "Build#: ${env.BUILD_NUMBER} - Branch: ${env.branch} - Skipped"
                        }

                    }

                }

                if (targetBranch && testsExist && primaryKoji) {
                    messageFields = packagepipelineUtils.setMessageFields('package.queued', 'build', parsedMsg)
                    packagepipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])
                    // Send message org.centos.prod.ci.koji-build.test.queued on fedmsg
                    messageFields = packagepipelineUtils.setTestMessageFields("queued", "koji-build", parsedMsg)
                    packagepipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                    stepName = 'schedule build'
                    stage(stepName) {

                        retry(TRIGGER_RETRY_COUNT) {
                            packagepipelineUtils.handlePipelineStep(stepName: stepName, debug: true) {

                                build job: "fedora-${env.branch}-build-pipeline",
                                        // Scratch messages from task.state.changed call it id, not task_id
                                        parameters: [string(name: 'PROVIDED_KOJI_TASKID', value: env.fed_task_id ?: env.fed_id),
                                                     string(name: 'CI_MESSAGE', value: env.CI_MESSAGE),
                                                     string(name: 'pipelineId', value: UUID.randomUUID().toString())],
                                        wait: false
                            }
                        }
                    }

                } else {
                    echo "CI_MESSAGE was invalid. Skipping..."
                    messageFields = packagepipelineUtils.setMessageFields('package.ignored', 'build', parsedMsg)
                    packagepipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])
                    currentBuild.description = "*Build Skipped*"
                }

                currentBuild.result = 'SUCCESS'

            } catch (e) {
                currentBuild.result = 'FAILURE'
                throw e
            } // finally {
                // set the metrics we want
                // ciMetrics.setMetricTag(jobMeasurement, 'package_name', env.fed_repo)
                // ciMetrics.setMetricTag(jobMeasurement, 'build_result', currentBuild.result)
                // ciMetrics.setMetricField(jobMeasurement, 'build_time', currentBuild.getDuration())
            // }
        }
    }
}
