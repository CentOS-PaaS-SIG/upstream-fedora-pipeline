#!groovy

def parseText(message) {
    if (!message) {
        return null
    }
    def parsed = readJSON text: message.replace("\n", "\\n")
    return parsed
}

timestamps {
    def libraries = ['upstream-fedora-pipeline': ['master', 'https://github.com/CentOS-PaaS-SIG/upstream-fedora-pipeline.git'],
                     'contra-lib'              : ['master', 'https://github.com/openshift/contra-lib.git']]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])

    }

    env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

    properties(
            [
                    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '500', daysToKeepStr: '', numToKeepStr: '500')),
                    parameters(
                            [
                                    string(description: 'CI message', defaultValue: '{}', name: 'CI_MESSAGE'),
                                    string(name: 'MSG_PROVIDER',
                                           defaultValue: 'FedoraMessagingStage',
                                           description: 'Main provider to send messages on'),
                                    string(name: 'KOJI_URL',
                                           defaultValue: 'https://koji.stg.fedoraproject.org',
                                           description: 'URL of koji instance'),
                                    string(name: 'KOJI_PARAMS',
                                           defaultValue: '--server https://koji.stg.fedoraproject.org/kojihub --topurl https://kojipkgs.stg.fedoraproject.org',
                                           description: 'Parameters to pass to koji tool'),
                                    string(name: 'ghprbActualCommit',
                                           defaultValue: 'master',
                                           description: 'The GitHub pull request commit'),
                                    string(name: 'ghprbGhRepository',
                                           defaultValue: '',
                                           description: 'The repo the PR is against'),
                                    string(name: 'sha1',
                                           defaultValue: '',
                                           description: ''),
                                    string(name: 'ghprbPullId',
                                           defaultValue: '',
                                           description: 'Pull Request Number'),
                                    string(name: 'ghprbPullAuthorLogin',
                                           defaultValue: '',
                                           description: 'Pull Request Author username'),
                                    string(name: 'SLAVE_TAG',
                                           defaultValue: 'stable',
                                           description: 'Tag for slave image'),
                                    string(name: 'FEDORACI_RUNNER_TAG',
                                           defaultValue: 'stable',
                                           description: 'Tag for fedoraci-runner image'),

                            ]
                    ),
                    pipelineTriggers(
                            [[$class: 'CIBuildTrigger',
                              noSquash: true,
                              providerData: [
                                  $class: 'RabbitMQSubscriberProviderData',
                                  name: 'FedoraMessagingStage',
                                  overrides: [
                                      topic: 'org.fedoraproject.stg.bodhi.update.status.testing.koji-build-group.build.complete',
                                      queue: 'osci-pipelines-queue-6'
                                  ]
                              ]
                            ]]
                    )
            ]
    )

    def TRIGGER_RETRY_COUNT = 3
    def stepName = null

    node('master') {

        packagepipelineUtils.ciPipeline {
            try {
                stepName = 'upstream-fedora-pipeline-build-trigger'
                stage(stepName) {

                    packagepipelineUtils.handlePipelineStep(stepName: stepName, debug: true) {

                        print "CI_MESSAGE"
                        print CI_MESSAGE
                        parsedMsg = parseText(env.CI_MESSAGE)
                        packagepipelineUtils.setDefaultEnvVars()
                        targetBranch = false
                        env.fed_branch = parsedMsg['artifact']['release']
                        env.branch = parsedMsg['artifact']['release']
                        env.isScratch = false
                        def rawhide_release = packagepipelineUtils.getRawhideRelease()
                        if (env.fed_branch == "f${rawhide_release}") {
                            env.fed_branch = 'master'
                            env.branch = 'rawhide'
                        }
                        if (env.branch != 'rawhide') {
                            error("FAIL: unsupported release ${env.branch}")
                        }
                    }

                }

                stepName = 'schedule build'
                stage(stepName) {
                    packagepipelineUtils.handlePipelineStep(stepName: stepName, debug: true) {
                        env.currentStage = stepName
                        def builds = parsedMsg['artifact']['builds']
                        for (newbuild in builds) {
                            env.fed_repo = newbuild['component']
                            env.nvr = newbuild['nvr']
                            env.build_id = newbuild['id']
                            env.issuer = newbuild['issuer']
                            env.task_id = newbuild['task_id']

                            env.ADDITIONAL_TASK_IDS = ''
                            for (tmpbuild in builds) {
                                if (tmpbuild['task_id'] != newbuild['task_id']) {
                                     env.ADDITIONAL_TASK_IDS += "${tmpbuild['task_id']} "
                                }
                            }

                            testsExist = contraUtils.checkTests(env.fed_repo, env.fed_branch, 'classic')
                            if (testsExist && env.branch == 'rawhide') {
                                currentBuild.displayName = "BUILD#: ${env.BUILD_NUMBER} - Release: ${env.branch} - Package: ${env.fed_repo}"

                                // Send message org.centos.prod.ci.koji-build.test.queued on fedmsg
                                messageFields = packagepipelineUtils.setMessageFields("queued", "koji-build", parsedMsg)
                                contraUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                                retry(TRIGGER_RETRY_COUNT) {

                                    build job: "fedora-rawhide-stage-build-pipeline",
                                            parameters: [string(name: 'PROVIDED_KOJI_TASKID', value: env.task_id),
                                                        string(name: 'ADDITIONAL_TASK_IDS', value: env.ADDITIONAL_TASK_IDS),
                                                        string(name: 'MSG_PROVIDER', value: env.MSG_PROVIDER),
                                                        string(name: 'KOJI_URL', value: env.KOJI_URL),
                                                        string(name: 'KOJI_PARAMS', value: env.KOJI_PARAMS),
                                                        string(name: 'ghprbActualCommit',
                                                            value: "${env.ghprbActualCommit}"),
                                                        string(name: 'ghprbGhRepository',
                                                            value: "${env.ghprbGhRepository}"),
                                                        string(name: 'ghprbPullAuthorLogin',
                                                            value: "${env.ghprbPullAuthorLogin}"),
                                                        string(name: 'sha1',
                                                            value: "${env.sha1}"),
                                                        string(name: 'ghprbPullId',
                                                            value: "${env.ghprbPullId}"),
                                                        string(name: 'SLAVE_TAG',
                                                            value: env.SLAVE_TAG),
                                                        string(name: 'FEDORACI_RUNNER_TAG',
                                                            value: env.FEDORACI_RUNNER_TAG),
                                                        string(name: 'CI_MESSAGE', value: env.CI_MESSAGE)],
                                            wait: false
                                }
                            } else {
                                currentBuild.displayName = "Build#: ${env.BUILD_NUMBER} - Release: ${env.branch} - Package: ${env.fed_repo} - Skipped"
                            }
                        }
                    }
                }
                currentBuild.result = 'SUCCESS'

            } catch (e) {
                currentBuild.result = 'FAILURE'
                throw e
            }
        }
    }
}
