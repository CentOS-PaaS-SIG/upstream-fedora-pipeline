#!groovy

timestamps {

    // Initialize all the ghprb variables we need
    env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/upstream-fedora-pipeline'
    env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'
    env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
    env.ghprbPullId = env.ghprbPullId ?: ''

    // Needed for podTemplate()
    env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
    env.STR_CONTAINER_TEST_TAG = env.STR_CONTAINER_TEST_TAG ?: 'stable'

    // Audit file for all messages sent.
    msgAuditFile = "messages/message-audit.json"

    // Number of times to keep retrying to make sure message is ingested
    // by datagrepper
    fedmsgRetryCount = 120

    // Execution ID for this run of the pipeline
    def executionID = UUID.randomUUID().toString()

    // Pod name to use
    def podName = 'fedcontainer-' + executionID

    def libraries = ['cico-pipeline'           : ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                     'ci-pipeline'             : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git']]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])

    }

    // Get Jenkins master pod
    def jenkinsPod = pipelineUtils.getMasterNode('jenkins')

    // Check out PR's version of library
    library identifier: "upstream-fedora-pipeline@${env.ghprbActualCommit}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: "https://github.com/${env.ghprbGhRepository}",
                                  traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                           [$class: 'RefSpecsSCMSourceTrait',
                                            templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                        [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

    //noinspection GroovyAssignabilityCheck
    properties(
            [
                    buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '100', daysToKeepStr: '90', numToKeepStr: '100')),
                    [$class: 'JobPropertyImpl', throttle: [count: 150, durationName: 'hour', userBoost: false]],
                    parameters(
                            [
                                    string(name: 'ghprbActualCommit',
                                           defaultValue: 'master',
                                           description: 'The GitHub pull request commit'),
                                    string(name: 'ghprbGhRepository',
                                           defaultValue: '',
                                           description: 'The repo the PR is against'),
                                    string(name: 'sha1',
                                           defaultValue: '',
                                           description: ''),
                                    string(name: 'ghprbPullId',
                                           defaultValue: '',
                                           description: 'Pull Request Number'),
                                    string(name: 'ghprbPullAuthorLogin',
                                           defaultValue: '',
                                           description: 'Pull Request Author username'),
                                    string(name: 'SLAVE_TAG',
                                           defaultValue: 'stable',
                                           description: 'Tag for slave image'),
                                    string(name: 'STR_CONTAINER_TEST_TAG',
                                           defaultValue: 'stable',
                                           description: 'Tag for str-container-test image'),
                                    string(name: 'DOCKER_REPO_URL',
                                           defaultValue: '172.30.254.79:5000',
                                           description: 'Docker repo url for Openshift instance'),
                                    string(name: 'OPENSHIFT_NAMESPACE',
                                           defaultValue: 'continuous-infra',
                                           description: 'Project namespace for Openshift operations'),
                                    string(name: 'OPENSHIFT_SERVICE_ACCOUNT',
                                           defaultValue: 'jenkins',
                                           description: 'Service Account for Openshift operations'),
                                    string(name: 'CI_MESSAGE',
                                           defaultValue: '',
                                           description: 'CI_MESSAGE')
                            ]
                    ),
            ]
    )

    podTemplate(name: podName,
                label: podName,
                cloud: 'openshift',
                serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
                idleMinutes: 0,
                namespace: OPENSHIFT_NAMESPACE,
                yaml: """
apiVersion: v1
kind: Pod
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: NotIn
            values:
            - ${jenkinsPod}
""",

            containers: [
                    // This adds the custom slave container to the pod. Must be first with name 'jnlp'
                    containerTemplate(name: 'jnlp',
                            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
                            ttyEnabled: false,
                            args: '${computer.jnlpmac} ${computer.name}',
                            command: '',
                            workingDir: '/workDir'),
                    // This adds the str-container-test container to the pod.
                    containerTemplate(name: 'str-container-test',
                            alwaysPullImage: true,
                            image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/str-container-test:' + STR_CONTAINER_TEST_TAG,
                            ttyEnabled: true,
                            command: '/usr/sbin/init',
                            privileged: true,
                            workingDir: '/workDir')
            ],
            volumes: [emptyDirVolume(memory: false, mountPath: '/sys/class/net')])
    {
        node(podName) {

            // pull in ciMetrics from ci-pipeline
            ciMetrics.prefix = packagepipelineUtils.influxDBPrefix()
            packagepipelineUtils.cimetrics = ciMetrics
            def jobMeasurement = packagepipelineUtils.timedMeasurement()

            def buildResult = null

            timeout(time: 3, unit: 'HOURS') {

                def currentStage = ""

                packagepipelineUtils.ciPipeline {
                        // We need to set env.HOME because the openshift slave image
                        // forces this to /home/jenkins and then ~ expands to that
                        // even though id == "root"
                        // See https://github.com/openshift/jenkins/blob/master/slave-base/Dockerfile#L5
                        //
                        // Even the kubernetes plugin will create a pod with containers
                        // whose $HOME env var will be its workingDir
                        // See https://github.com/jenkinsci/kubernetes-plugin/blob/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java#L311
                        //
                        env.HOME = "/root"
                        //
                    try {
                            // Prepare our environment
                        currentStage = "prepare-environment"
                        stage(currentStage) {

                            packagepipelineUtils.timedPipelineStep('stepName': currentStage, 'debug': true) {

                                deleteDir()

                                env.artifact = 'pr'
                                // Parse the CI_MESSAGE and inject it as env vars
                                pipelineUtils.injectPRVars("fed", env.CI_MESSAGE)

                                // Decorate our build
                                String buildName = "PR-${env.fed_id}:${env.fed_repo}:${env.fed_branch}"
                                pipelineUtils.setCustomBuildNameAndDescription(buildName, buildName)
                                pipelineUtils.flattenJSON('fed', env.CI_MESSAGE)


                                packagepipelineUtils.setDefaultEnvVars()

                                // Gather some info about the node we are running on for diagnostics
                                pipelineUtils.verifyPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
                                // create audit message file
                                pipelineUtils.initializeAuditFile(msgAuditFile)

                            }
                        }

                        currentStage = "container-tests"
                        stage(currentStage) {
                            // Only run this stage if tests exist
                            if (!pipelineUtils.checkTests(env.fed_repo, env.fed_branch, 'container', (env.fed_id ?: null), 'container')) {
                                pipelineUtils.skip(currentStage)
                            } else {
                                packagepipelineUtils.timedPipelineStep(stepName: currentStage, debug: true) {
                                    // Set stage specific vars
                                    packagepipelineUtils.setStageEnvVars(currentStage)

                                    // Set our message topic, properties, and content
                                    messageFields = packagepipelineUtils.setMessageFields("container.test.functional.running", artifact)

                                    // Send message org.centos.prod.ci.pipeline.allpackages.container.test.functional.running on fedmsg
                                    pipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                                    // Prepare to send stage.complete message on failure
                                    env.messageStage = 'container.test.functional.complete'

                                    // Run functional tests
                                    try {
                                        pipelineUtils.executeInContainer(currentStage, "str-container-test", "/home/container-test.sh")
                                    } catch(e) {
                                        if (pipelineUtils.fileExists("${WORKSPACE}/${currentStage}/logs/test.log")) {
                                            buildResult = 'UNSTABLE'
                                            // set currentBuild.result to update the message status
                                            currentBuild.result = buildResult

                                        } else {
                                            throw e
                                        }
                                    }

                                    // Set our message topic, properties, and content
                                    messageFields = packagepipelineUtils.setMessageFields("container.test.functional.complete", artifact)

                                    // Send message org.centos.prod.ci.pipeline.allpackages.container.test.functional.complete on fedmsg
                                    pipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                                }
                            }
                        }

                        buildResult = buildResult ?: 'SUCCESS'

                    } catch (e) {
                        // Set build result
                        buildResult = 'FAILURE'
                        currentBuild.result = buildResult

                        // Send message org.centos.prod.ci.pipeline.allpackages.<stage>.complete on fedmsg if stage failed
                        messageFields = packagepipelineUtils.setMessageFields(messageStage, artifact)
                        pipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                        // Report the exception
                        echo "Error: Exception from " + currentStage + ":"
                        echo e.getMessage()

                        // Throw the error
                        throw e

                    } finally {
                        currentBuild.result = buildResult
                        pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)

                        // Archive our artifacts
                        step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/*.example', fingerprint: true])

                        // Set our message topic, properties, and content
                        // TODO
                        messageFields = packagepipelineUtils.setMessageFields("complete", artifact)

                        // Send message org.centos.prod.ci.pipeline.allpackages.complete on fedmsg
                        pipelineUtils.sendMessage(messageFields['topic'], messageFields['properties'], messageFields['content'])

                    }
                }
            }
        }
    }
}
